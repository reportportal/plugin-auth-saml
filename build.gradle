plugins {
    id 'net.researchgate.release' version '2.8.0'
    id "org.springframework.boot" version "2.1.5.RELEASE" apply false
    id 'java'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "org.ajoberstar.grgit" version "3.1.1"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

configurations {
    runtime {
        transitive = true
    }
}

dependencyManagement {
    imports {
        mavenBom "com.github.reportportal:commons-bom:8706fef"
    }
}

project.ext {
    pluginID = "saml"
    pluginsDir = "$buildDir/plugins"
}

dependencies {
    compile('com.github.reportportal:plugin-api:bee7c5f6')
    annotationProcessor 'com.github.reportportal:plugin-api:bee7c5f6'
    compile 'com.github.reportportal:commons-rules:5.0.0-BETA-6'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security'

    //SAML
    compile('org.springframework.security.extensions:spring-security-saml2-core:2.0.0.M26')
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'org.postgresql:postgresql:42.2.2'
    compile group: 'org.jooq', name: 'jooq', version: '3.11.4'
}

wrapper {
    gradleVersion = '5.4.1'
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

jar {
    from("src/main/resources") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginID}",
                "Plugin-Version": "1",
                "Plugin-Provider": "Ivan Budayeu",
                "Plugin-Class": "com.epam.reportportal.config.TestPlugin",
//                "Plugin-Dependencies": ""
        )
    }
}

task plugin(type: Jar) {
    baseName = "plugin-${pluginID}"
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compile
    }
    extension('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}